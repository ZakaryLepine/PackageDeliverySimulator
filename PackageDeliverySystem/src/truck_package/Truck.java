// -----------------------------------------------------
// Assignment 2
// Part: 1
// Written by: Zakary Lepine 40192181
//-----------------------------------------------------
/** Zakary Lepine 40192181
 *  COMP 249
 *  Assignment 2 Part 1
 *  August 2
 */	
package truck_package;
import deliverable_package.Box;
import deliverable_package.Letter;
import deliverable_package.MetalCrate;
import deliverable_package.Package;
import deliverable_package.WoodCrate;
import exception_package.PackageException;
/**
 * Main class of the truck_package
 * @author Zakary 40192181
 */
public class Truck {
	
	/**
	 * Name of the truck driver
	 */
	private String driverName;
	/**
	 * Name of the city where the truck began its route
	 */
	private String originatingCity;
	/**
	 * Name of the city where the truck ended its route
	 */
	private String destinationCity;
	/**
	 * Weight of the truck when it is loaded with packages
	 */
	private double grossWeight;
	/**
	 * Weight of the truck when it is empty of packages
	 */
	private double unloadedWeight;
	/**
	 * Number of packages in the truck
	 */
	private int numberOfPackage;
	/**
	 * Array that stores the information of each package
	 * Maximum size of 200 packages
	 */
	private Package[] packageList;
	/**
	 * Gross income generated by the truck 
	 * Calculated by adding the shipping costs of each package (i.e. total shipping cost) 
	 */
	private double grossIncome;
	/**
	 * Default Truck constructor
	 * Initialize Truck fields with default values
	 */
	public Truck()
	{
		driverName = "Default driver name";
		originatingCity = "Default originating city";
		destinationCity = "Default destination city";
		grossWeight = 0.0;
		unloadedWeight = 0;
		packageList = new Package[200];
		numberOfPackage = 0; 
		grossIncome = 0.0;
	}
	/**
	 * Used for testing
	 * Initialize Truck fields with default values
	 * @param packageListLimit To set the package list size
	 */
	public Truck(int packageListLimit)
	{
		driverName = "Default driver name";
		originatingCity = "Default originating city";
		destinationCity = "Default destination city";
		grossWeight = 0.0;
		unloadedWeight = 0;
		packageList = new Package[packageListLimit];
		numberOfPackage = 0; 
		grossIncome = 0.0;
	}
	
	/**
	 * To set a Truck object driver name in other classes
	 * @param driverName To assign to driverName field
	 */
	public void setDriverName(String driverName) {
		this.driverName = driverName;
	}
	/**
	 * To set a Truck object originating city in other classes
	 * @param originatingCity To assign to originatingCity field
	 */
	public void setOriginatingCity(String originatingCity) {
		this.originatingCity = originatingCity;
	}
	/**
	 * To set a Truck object destination city in other classes
	 * @param destinationCity To assign to destinationCity field
	 */
	public void setDestinationCity(String destinationCity) {
		this.destinationCity = destinationCity;
	}
	/**
	 * To set a Truck object unloaded weight in other classes
	 * @param unloadedWeight To assign to unloadedWeight field
	 */
	public void setUnloadedWeight(double unloadedWeight) {
		this.unloadedWeight = unloadedWeight;
	}
	/**
	 * To access a Truck object driver name in other classes
	 * @return driver name of a Truck object
	 */
	public String getDriverName() {
		return driverName;
	}
	/**
	 * To access a Truck object originating city in other classes
	 * @return originating city of a Truck object
	 */
	public String getOriginatingCity() {
		return originatingCity;
	}
	/**
	 * To access a Truck object destination city in other classes
	 * @return destination city of a Truck object
	 */
	public String getDestinationCity() {
		return destinationCity;
	}
	/**
	 * To access a Truck object gross weight in other classes
	 * Calculates gross weight by adding the weight of each package from the package list and the unloaded weight of the truck
	 * @return gross weight of a Truck object
	 */
	public double getGrossWeight() {
		calculateGrossWeight(packageList);
		return grossWeight;
	}
	/**
	 * To access a Truck object unloaded weight in other classes
	 * @return unloaded weight of a Truck object
	 */
	public double getUnloadedWeight() {
		return unloadedWeight;
	}
	/**
	 * To access a Truck object number of loaded packages in other classes
	 * @return number of loaded packages of a Truck object
	 */
	public int getNumberOfPackage() {
		return numberOfPackage;
	}
	/**
	 * To access a Truck object gross income generated in other classes
	 * Calculates the gross income by adding the shipping cost of each package from the package list
	 * @return gross income of a Truck object
	 */
	public double getGrossIncome() {
		calculateGrossIncomeFromPackageList(packageList);
		return grossIncome;
	}
	/**
	 * To access a Truck object package from the package list in other classes
	 * @param index Index of the package in the package list
	 * @return package from the package list of a Truck object
	 */
	public Package getPackageFromPackageList(int index){
		return packageList[index];
	}
	
	/**
	 * To load a package unto the truck 
	 * Checks the last digit of the tracking number: Creates a Letter if char is '0', creates a box if char is '1', creates a wood crate if char is '2', creates a metal crate if char is '3', else throws a Package Exception and returns false
	 * Checks the class of the package: If letter, checks if weight is > 2 lbs. If box, checks if weight is > 40 lbs. If wood crate, checks if weight is > 80 lbs. If metal crate, checks if weight is > 100 lbs. If any is > than the limit, throws Package Exception and returns false
	 * Checks if the number of packages in the package list is >= 199. If it is, throws Package Exception and returns false
	 * Checks the class of the package, down casts to the appropriate class, and adds the package to the package list (loads package unto the truck)
	 * Increments the number of packages in the package list
	 * @param trackingNumberInput To set a package tracking number
	 * @param packageWeightInput To set a package weight 
	 * @return if the package can be loaded unto the truck
	 */
	public boolean load(String trackingNumberInput, double packageWeightInput){ 
		
		Package holder = null;

		try {
			if (trackingNumberInput.charAt(8) == '0') {
				holder = new Letter(trackingNumberInput, packageWeightInput);
			}
			else if (trackingNumberInput.charAt(8) == '1') {
				holder = new Box(trackingNumberInput, packageWeightInput);
			}
			else if (trackingNumberInput.charAt(8) == '2') {
				holder = new WoodCrate(trackingNumberInput, packageWeightInput);
			}
			else if (trackingNumberInput.charAt(8) == '3') {
				holder = new MetalCrate(trackingNumberInput, packageWeightInput);
			}
			else
			{
				throw new PackageException();
			}
		}
		catch(PackageException e) {
			System.out.println("\n" + e.getMessage());
			System.out.println("Package Type: Unknown\nTracking Number: " + trackingNumberInput + "\nWeight: " + packageWeightInput);
			return false;
		}
		
		try {
			if (holder.getClass() == MetalCrate.class) {
				if (holder.getWeight() > 100) 
					throw new PackageException();
			}
			else if (holder.getClass() == WoodCrate.class) {
				if (holder.getWeight() > 80) throw new PackageException();
			}
			else if (holder.getClass() == Box.class) {
				if (holder.getWeight() > 40) throw new PackageException();
			}
			else {
				if (holder.getWeight() > 2) throw new PackageException();
			}
		}
		catch(PackageException e) {
			System.out.println("\n" + e.getMessage());
			System.out.println("Package Type: " + holder.getClass() + "\nTracking Number: " + trackingNumberInput + "\nWeight: " + packageWeightInput);
			return false;
		}
		
		try {
			if (numberOfPackage >= packageList.length) {
				throw new PackageException();
			}
		}
		catch (PackageException e) {
			System.out.println("\n" + e.getMessage());
			System.out.println("Package Type: " + holder.getClass() + "\nTracking Number: " + trackingNumberInput + "\nWeight: " + packageWeightInput);
			System.out.println("The package could not be loaded into the truck");
			return false;
		}
		
		if (holder.getClass() == MetalCrate.class) {
			packageList[numberOfPackage] = (MetalCrate) holder;
		}
		else if (holder.getClass() == WoodCrate.class) {
			packageList[numberOfPackage] = (WoodCrate) holder;
		}
		else if (holder.getClass() == Box.class) {
			packageList[numberOfPackage] = (Box) holder;
		}
		else {
			packageList[numberOfPackage] = (Letter) holder;
		}
		System.out.println("\nMaking space in the truck and loading the package of type: " + packageList[numberOfPackage].getClass());

		numberOfPackage++;
		return true;
	}
	
	/**
	 * To unload a package from the truck
	 * Makes the package to be unloaded null
	 * If an index of the package list is not null (loaded with a package), copies the element to the temporary array and increments the index of the temporary array
	 * Assigns the reference of the temporary array to the package list
	 * Decrements the number of packages in the package list by 1
	 * @param packageNumber Index of the package to be unloaded
	 * @throws PackageException If the package number being unloaded is null(not been loaded)
	 */
	public void unload(int packageNumber) throws PackageException
	{
		
		if (packageList[packageNumber] == null) throw new PackageException();
		int count = 0;
		Package[] tempArray = new Package[200];
		
		packageList[packageNumber] = null;
		
		for (int i = 0; i < packageList.length;i++) {
			if (!(packageList[i] == null)) {
				tempArray[count] = packageList[i];
				count++;
			}
		}
		packageList = tempArray;
		numberOfPackage--;
	}
	
	/**
	 * To convert a truck weight from pounds to kilograms
	 * @param weightPounds The weight to be converted to kilograms
	 * @return The weight in kilograms
	 */
	public double toKilograms(double weightPounds){
		return weightPounds / 2.2046;
	}
	/**
	 * To convert a truck weight from kilograms to pounds
	 * @param weightKilograms The weight to be converted to pounds
	 * @return The weight in pounds
	 */
	public double toPounds(double weightKilograms){
		return weightKilograms * 2.2046;
	}

	/**
	 * Calculates the gross income generated from the delivery by adding the shipping costs of each element in a Package array
	 * Skips an index if a package has not been instantiated
	 * @param packageList Package list from which the shipping costs are calculated
	 */
	private void calculateGrossIncomeFromPackageList(Package[] packageList){
		grossIncome = 0;
		for (int i = 0; i < packageList.length;i++){
			if (packageList[i] == null) continue; //To avoid NullPointerException
			grossIncome += packageList[i].getShippingCost(); //Invokes the appropriate getShippingCost() method depending on the object type 
		}
	}
	
	/**
	 * Calculates the gross weight of the truck by adding the weight of each package and the weight of the truck
	 * Skips an index if a package has not been instantiated
	 * @param packageList Package list from which the package weights are calculated
	 */
	private void calculateGrossWeight(Package[] packageList){ //In pounds
		
		grossWeight = unloadedWeight;
		for (int i = 0; i < packageList.length; i++) {
			if (packageList[i] == null) continue; //To avoid NullPointerException
			grossWeight += packageList[i].getWeight();
		}
	}
	/**
	 * To display the list of packages that have been loaded unto the truck
	 */
	public void displayPackageList()
	{
		System.out.println();
		int count = 1;
		for (int i = 0; i < packageList.length; i++)
		{
			if (packageList[i] != null) {
				System.out.println("Package #" + count + ": " + packageList[i] + "\n");
				count++;
			}
		}
	}
}
